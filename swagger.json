{
  "openapi": "3.0.3",
  "info": {
    "title": "Not Kino API",
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "movie",
      "description": "Everything about movie"
    },
    {
      "name": "user",
      "description": "Operations about user"
    }
  ],
  "paths": {
    "/movie": {
      "get": {
        "tags": [
          "movie"
        ],
        "summary": "get list of movies",
        "description": "filtering by limit, rate, title, year",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Status values that need to be considered for filter",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "rate",
            "in": "query",
            "description": "Filter by rating",
            "required": false,
            "explode": true,
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "name": "year",
            "in": "query",
            "required": false,
            "explode": true,
            "schema": {
              "type": "integer",
              "default": null
            }
          },
          {
            "name": "title",
            "in": "query",
            "required": false,
            "explode": true,
            "schema": {
              "type": "string",
              "default": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": ""
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          }
        }
      },
      "post": {
        "tags": [
          "movie"
        ],
        "summary": "insert new movie",
        "description": "insert new movie",
        "operationId": "addMovie",
        "requestBody": {
          "description": "insert new movie",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Movie"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": ""
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": ""
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Movie"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": ""
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/movie/kp": {
      "post": {
        "tags": [
          "movie"
        ],
        "summary": "imports movies from another db",
        "description": "imports movies from kinopoisk database in json-format",
        "operationId": "addMovies",
        "requestBody": {
          "description": "Create a new pet in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": ""
              }
            },
            "application/xml": {
              "schema": {
                "$ref": ""
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": ""
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": ""
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": ""
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/movie/:id": {
      "patch": {
        "tags": [
          "movie"
        ],
        "summary": "Updates movie ID",
        "description": "",
        "operationId": "patchMovie",
        "requestBody": {
          "description": "Create a new pet in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": ""
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": ""
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": ""
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "movie"
        ],
        "summary": "Finds and delete existing movie",
        "description": "",
        "operationId": "deleteMovie",
        "requestBody": {
          "description": "Create a new pet in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": ""
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": ""
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": ""
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "movie"
        ],
        "summary": "Checks if movie exists",
        "description": "",
        "operationId": "getMovie",
        "requestBody": {
          "description": "Create a new pet in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": ""
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": ""
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },

    "/user/register": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Register new user",
        "description": "Register new user and save it in database",
        "operationId": "registerUser",
        "requestBody": {
          "description": "Make new user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": ""
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/user/:username": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Checks if the user exists",
        "description": "",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "Write username",
            "required": false,
            "explode": true,
            "schema": {
              "type": "string",
              "default": "solo"
            }
          }
        ],
        "operationId": "getUser",
        "requestBody": {
          "description": "Checking if the user exists in database by it's username",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/getUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": ""
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": ""
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/user/activate": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Activates account",
        "description": "Sends JWT token",
        "operationId": "activate",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": ""
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Authorization",
        "operationId": "Login",
        "requestBody": {
          "description": "Pass username and password in json format",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Auth"
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "Write your username",
            "required": true,
            "explode": true,
            "schema": {
              "type": "string",
              "default": null
            }
          },
          {
            "name": "password",
            "in": "query",
            "required": true,
            "explode": true,
            "schema": {
              "type": "string",
              "default": null
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": ""
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/user/addMovie": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Save movie in favorites",
        "description": "Add a movie into array of favorite movies",
        "operationId": "addMovie",
        "requestBody": {
          "description": "Pass an objectID to field, to save your movie in array",
          "content": {
            "application/json": {
              "schema": {
                "$ref": ""
              }
            },
            "application/xml": {
              "schema": {
                "$ref": ""
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": ""
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": ""
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": ""
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Movie": {
        "required": [
          "name",
          "photoUrls"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "Moana"
          },
          "description": {
            "type": "string",
            "example": "Someone ..."
          },
          "rate": {"type": "object",
            "xml": {
              "wrapped": true
            },
            "items": {
              "kp": {
                "type": "float",
                "example": 0
              },
              "imdb": {
                "type": "float",
                "example": 0
              }
            }
          }
        }
      },
      "User": {
        "required": [
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "solo"
          },
          "role": {
            "type": "string",
            "example": "admin"
          },
          "email": {
            "type": "string",
            "example": "211623@astanait.edu.kz"
          },
          "avatar_url": {
            "type": "string"
          }
        }
      },
      "Auth": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "solo"
          },
          "password": {
            "type": "string",
            "example": "password"
          }
        }
      },
      "getUser": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "solo"
          }
        }
      }
    }
  }
}